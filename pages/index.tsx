import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import styles from "../styles/Home.module.css";
import { changeAmountInfo, getCombinationChanges } from "../utils/combineHelper";
import { getFolder } from "../utils/fileHandle";
import { genSingleImgUrl } from "../utils/imgHelper";
import { AmountInfo, ConfigLayer } from "../utils/interfaces";

const Home: NextPage = () => {
  const [results, setResults] = useState<string[]>([]);
  const [configLayers, setConfigLayers] = useState<ConfigLayer[]>([]);
  const [combinations, setCombinations] = useState<number[]>([]);
  const [amountInfo, setAmountInfo] = useState<AmountInfo>();

  const genResults = async () => {
    for (const bitCom of combinations.filter((c) => c & 1)) {
      const url = await genSingleImgUrl(configLayers, bitCom);
      // const newResults = [...results, url];
      // setResults(newResults);
      setResults((old) => [...old, url]);
    }
  };
  const handleGetFolder = async () => {
    const folderResults = await getFolder();
    if (!folderResults) {
      return;
    }
    setCombinations(folderResults.combinations);
    setConfigLayers(folderResults.configLayers);
    setAmountInfo(folderResults.amountInfo);
  };
  const genConfigUi = () => {
    return configLayers.map((lay, layIndex) => {
      return (
        <div key={layIndex}>
        <p>{lay.folder}</p>
          {lay.items.map((ite, otemIndex) => {
            return (
              <div key={otemIndex}>
              <span>{ite.source.name}</span>
              <input type="number" 
              value={amountInfo ? amountInfo[ite.bit] : 0}
              onChange={e => {adjustTraitAmount(ite.bit, amountInfo ? amountInfo[ite.bit] : 0,  Number(e.target.value))}}
              />
              </div>
            )
          })}
        </div>
      )
    })
  }
  const adjustTraitAmount = (
    bit: number,
    oldAmount: number,
    newAmount: number,
  ) => {
    const adjustAmount = newAmount - oldAmount
    const {bitChange, combinations: newCombinations} = getCombinationChanges(
      combinations,
      bit,
      adjustAmount
    )
    setAmountInfo(oldAmount => {
      const newVal = changeAmountInfo({...oldAmount} || {}, bitChange, adjustAmount > 0)
      console.log('newVal',  newVal)
      return newVal
    })
    setCombinations(newCombinations)
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <button onClick={handleGetFolder}>upload</button>
        <button onClick={genResults}>genImg</button>
        {genConfigUi()}
        {results.map((r, i) => (
          <div key={i}>
            <Image src={r} alt="" width={300} height={300}></Image>
          </div>
        ))}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            {/* <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} /> */}
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
